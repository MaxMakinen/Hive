
<- Matrix ----------------------------------------------------------------------
The Matrix class creates transformation matrices based on input.

An instance can be constructed with an array with 'preset' value and,
depending on your choice, other details.

new Matrix( array( 'preset' => Matrix::PRESET[, 'key' => vaue]))

list of 'preset' values:
 Matrix::IDENTITY = creates identity matrix, needs no other input.

 Matrix::SCALE = creates scaling transormation matrix from scaling factor.
 Requires key value pair: ('scale' => (float)scaling factor)

 Matrix::RX = creates rotation matrix from rotation angle in radians.
 Requires key value pair: ('angle' => (float)angle_in_radians)

 Matrix::RY = creates rotation matrix from  rotation angle in radians.
 Requires key value pair: ('angle' => (float)angle_in_radians)

 Matrix::RZ = creates rotation matrix from rotation angle in radians.
 Requires key value pair: ('angle' => (float)angle_in_radians)

 Matrix::TRANSLATION = creates translation transformation matrix from vector.
 Requires key value pair: ('vtc' => (Vector)translation_vector)

 Matrix::PROJECTION = creates projection matrix from input values.
 fov = field of view in degrees.
 ratio = screen width to height ratio.
 near = near clipping plane.
 far = far clipping plane.

 Requires key value pairs: 
 ('fov' => (float)field_of_view, 
  'ratio' => (float)witdh/height, 
  'near' => (float)near_plane, 
  'far' => (float)far_plane)

 Matrix::NEW = creates a copy of the input matrix.
 Requires key value pair: 
 ('matrix' => (Matrix)input_matrix)

The class provides the following methods :

Matrix mult( Matrix $rhs );
Returns the multiplication of both matrices.

Vertex transformVertex( Vertex $vtx );
Returns a new vertex resulting from the transformation of the vertex by the
matrix.

Matrix transpose()
Returns the transpose of the matrix as new Matrix instance.
---------------------------------------------------------------------- Matrix ->